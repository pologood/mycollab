<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mycollab.module.project.dao.TaskMapperExt">

    <resultMap extends="com.mycollab.module.project.dao.TaskMapper.ResultMapWithBLOBs"
            id="TaskResult" type="com.mycollab.module.project.domain.SimpleTask">
        <result column="projectName" property="projectName" jdbcType="VARCHAR"/>
        <result column="projectShortname" property="projectShortname" jdbcType="VARCHAR"/>
        <result column="numComments" property="numComments" jdbcType="INTEGER"/>
        <result column="milestoneName" property="milestoneName" jdbcType="VARCHAR"/>
        <result column="assignUserAvatarId" property="assignUserAvatarId" jdbcType="VARCHAR"/>
        <result column="assignUserFullName" property="assignUserFullName" jdbcType="VARCHAR"/>
        <result column="logByAvatarId" property="logByAvatarId" jdbcType="VARCHAR"/>
        <result column="logByFullName" property="logByFullName" jdbcType="VARCHAR"/>
        <result column="billableHours" property="billableHours" jdbcType="DOUBLE"/>
        <result column="nonBillableHours" property="nonBillableHours" jdbcType="DOUBLE"/>
        <result column="numFollowers" property="numFollowers" jdbcType="INTEGER"/>
        <result column="ticketKey" property="ticketKey" jdbcType="INTEGER"/>
        <result column="parentTicketKey" property="parentTicketKey" jdbcType="INTEGER"/>
        <result column="parentTicketId" property="parentTicketId" jdbcType="INTEGER"/>
        <result column="parentTicketType" property="parentTicketType" jdbcType="VARCHAR"/>
        <collection columnPrefix="affectedversion_" notNullColumn="id"
                    ofType="com.mycollab.module.project.domain.Version"
                    property="affectedVersions"
                    resultMap="com.mycollab.module.project.dao.VersionMapper.BaseResultMap" />
        <collection columnPrefix="component_" notNullColumn="id"
                    ofType="com.mycollab.module.project.domain.Component"
                    property="components"
                    resultMap="com.mycollab.module.project.dao.ComponentMapper.BaseResultMap" />
    </resultMap>

    <sql id="querySearchCriteria">
        <![CDATA[
        #set($searchCriteria = $_parameter.searchCriteria)
        
        #ifnotnull($searchCriteria.name)
            ${searchCriteria.name.operation} m_prj_task.name LIKE '%${searchCriteria.name.value}%'
        #end
       
        #ifnotnull($searchCriteria.projectId)
            ${searchCriteria.projectId.operation} m_prj_task.projectId=@{searchCriteria.projectId.value,jdbcType=NUMERIC}
        #end
        
        #ifnotnull($searchCriteria.statuses)
            ${searchCriteria.statuses.operation} m_prj_task.status IN
            #repeat(${searchCriteria.statuses.values} $status "," "(" ")")
                @{status}
            #end
        #end
        
        #ifnotnull($searchCriteria.priorities)
            ${searchCriteria.priorities.operation} m_prj_task.priority IN
            #repeat(${searchCriteria.priorities.values} $priority "," "(" ")")
                @{priority}
            #end
        #end
        
        #ifnotnull($searchCriteria.milestoneId)
            ${searchCriteria.milestoneId.operation} m_prj_task.milestoneId = @{searchCriteria.milestoneId.value,jdbcType=NUMERIC}
        #end
        
        #ifnotnull($searchCriteria.assignUser)
            #ifnotnull($searchCriteria.assignUser.value)
                ${searchCriteria.assignUser.operation} m_prj_task.assignUser = @{searchCriteria.assignUser.value}
            #end
            
            #ifnull($searchCriteria.assignUser.value)
                ${searchCriteria.assignUser.operation} m_prj_task.assignUser IS NULL
            #end    
        #end
        
        #ifnotnull($searchCriteria.milestoneId)
            ${searchCriteria.milestoneId.operation} m_prj_task.milestoneId=@{searchCriteria.milestoneId.value,jdbcType=NUMERIC}
        #end

        #ifnotnull($searchCriteria.dueDate)
            ${searchCriteria.dueDate.operation} CAST(m_prj_task.dueDate AS DATE ) ${searchCriteria.dueDate.comparison} @{searchCriteria.dueDate.value}
        #end

        #ifnotnull($searchCriteria.saccountid)
            ${searchCriteria.saccountid.operation} m_prj_task.sAccountId = @{searchCriteria.saccountid.value,jdbcType=NUMERIC}
        #end
        
        #selectExpr($searchCriteria.extraFields)
        ]]>
    </sql>

    <sql id="queryTotalCountSearchCriteria">
        <![CDATA[
        #set($searchCriteria = $_parameter.searchCriteria)
        
        #ifnotnull($searchCriteria.name)
            ${searchCriteria.name.operation} m_prj_task.name LIKE '%${searchCriteria.name.value}%'
        #end
        
        #ifnotnull($searchCriteria.projectId)
            ${searchCriteria.projectId.operation} m_prj_task.projectId=@{searchCriteria.projectId.value,jdbcType=NUMERIC}
        #end
        
        #ifnotnull($searchCriteria.statuses)
            ${searchCriteria.statuses.operation} m_prj_task.status IN
            #repeat(${searchCriteria.statuses.values} $status "," "(" ")")
                @{status}
            #end
        #end
        
        #ifnotnull($searchCriteria.priorities)
            ${searchCriteria.priorities.operation} m_prj_task.priority IN
            #repeat(${searchCriteria.priorities.values} $priority "," "(" ")")
                @{priority}
            #end
        #end
        
        #ifnotnull($searchCriteria.milestoneId)
            ${searchCriteria.milestoneId.operation} m_prj_task.milestoneId = @{searchCriteria.milestoneId.value,jdbcType=NUMERIC}
        #end
        
        #ifnotnull($searchCriteria.assignUser)
            ${searchCriteria.assignUser.operation} m_prj_task.assignUser = @{searchCriteria.assignUser.value}
        #end
        
        #ifnotnull($searchCriteria.milestoneId)
            ${searchCriteria.milestoneId.operation} m_prj_task.milestoneId=@{searchCriteria.milestoneId.value,jdbcType=NUMERIC}
        #end

        #ifnotnull($searchCriteria.saccountid)
            ${searchCriteria.saccountid.operation} m_prj_task.sAccountId = @{searchCriteria.saccountid.value,jdbcType=NUMERIC}
        #end
        
        #totalCountExpr($searchCriteria.extraFields)
        ]]>
    </sql>

    <sql id="selectTask">
        <![CDATA[
            SELECT m_prj_task.id, m_prj_task.name, m_prj_task.percentagecomplete, m_prj_task.startDate, m_prj_task.endDate, m_prj_task.priority,
                 m_prj_task.duration, m_prj_task.isestimated, m_prj_task.projectId, m_prj_task.dueDate, m_prj_task.description,
                 m_prj_task.originalEstimate, m_prj_task.remainEstimate,
                 m_prj_task.milestoneId, m_prj_task.createdTime, m_prj_task.lastUpdatedTime, m_prj_task.assignUser, m_prj_task.sAccountId,
                 m_prj_milestone.name AS milestoneName, m_prj_project.name AS projectName, m_prj_project.shortname AS projectShortname, m_prj_task.status,
                 m_prj_task.createdUser, m_prj_ticket_key.ticketKey AS ticketKey, s_user.avatarId AS assignUserAvatarId,
                 concat(s_user.firstname, ' ', s_user.lastname) AS assignUserFullName,
                 log_user.avatarId AS logByAvatarId, concat(log_user.firstname, ' ', log_user.lastname) AS logByFullName,
                 affectedversion.id as affectedversion_id, affectedversion.projectId as affectedversion_projectid,
                 affectedversion.description as affectedversion_description, affectedversion.duedate as affectedversion_duedate,
                 affectedversion.name as affectedversion_name, affectedversion.createdUser as affectedversion_createdUser,
                 affectedversion.createdTime as affectedversion_createdTime, affectedversion.lastUpdatedTime as affectedversion_lastUpdatedTime,
                 component.id as component_id, component.projectId as component_projectid, component.name as component_name,
                 component.userlead as component_userlead, component.description as component_description, component.createdUser as component_createdUser,
                 component.createdTime as component_createdTime, component.lastUpdatedTime as component_lastUpdatedTime,
                 (SELECT count(*)
                    FROM m_comment
                    WHERE m_comment.type='Project-Task' AND m_comment.typeId=m_prj_task.id) AS numComments,
                 (SELECT COALESCE(SUM(m_prj_time_logging.logValue), 0)
                     FROM m_prj_time_logging
                     WHERE m_prj_time_logging.projectId = m_prj_task.projectId
                         AND m_prj_time_logging.type='Project-Task' AND m_prj_time_logging.typeId=m_prj_task.id AND m_prj_time_logging.isBillable = 1) AS billableHours,
                 (SELECT COALESCE(SUM(m_prj_time_logging.logValue), 0)
                     FROM m_prj_time_logging
                     WHERE m_prj_time_logging.projectId = m_prj_task.projectId
                         AND m_prj_time_logging.type='Project-Task' AND m_prj_time_logging.typeId=m_prj_task.id AND m_prj_time_logging.isBillable = 0) AS nonBillableHours,
                 (SELECT COUNT(*)
                     FROM m_monitor_item
                     WHERE m_monitor_item.typeId = m_prj_task.id AND m_monitor_item.type = 'Project-Task') AS numFollowers,
                 parentKeyTbl.ticketKey AS parentTicketKey, parentKeyTbl.ticketId AS parentTicketId, m_prj_ticket_hierarchy.parentType AS parentTicketType
            FROM m_prj_task
                LEFT OUTER JOIN m_prj_project ON (m_prj_task.projectId = m_prj_project.id)
                LEFT OUTER JOIN m_prj_milestone ON (m_prj_milestone.id = m_prj_task.milestoneId)
                LEFT OUTER JOIN s_user ON (s_user.username = m_prj_task.assignUser)
                LEFT OUTER JOIN s_user AS log_user ON (log_user.username = m_prj_task.createdUser)
                LEFT OUTER JOIN m_prj_ticket_key ON (m_prj_task.id = m_prj_ticket_key.ticketId AND m_prj_ticket_key.ticketType = 'Project-Task')
                LEFT OUTER JOIN m_prj_ticket_relation AS relatedItem1 ON (relatedItem1.ticketId = m_prj_task.id AND relatedItem1.ticketType='Project-Task' AND relatedItem1.rel='AffVersion')
                LEFT OUTER JOIN m_prj_version AS affectedversion ON (affectedversion.id = relatedItem1.typeId AND relatedItem1.type='Project-Version')
                LEFT OUTER JOIN m_prj_ticket_relation AS relatedItem2 ON (relatedItem2.ticketId = m_prj_task.id AND relatedItem2.ticketType='Project-Task' AND relatedItem2.rel='Component')
                LEFT OUTER JOIN m_prj_component AS component ON (component.id = relatedItem2.typeId AND relatedItem2.type = 'Project-Component')
                LEFT OUTER JOIN m_prj_ticket_hierarchy ON (m_prj_ticket_hierarchy.ticketId = m_prj_task.id AND m_prj_ticket_hierarchy.ticketType = 'Project-Task')
                LEFT OUTER JOIN m_prj_ticket_key AS parentKeyTbl ON (m_prj_ticket_hierarchy.parentId = parentKeyTbl.ticketId AND m_prj_ticket_hierarchy.parentType = parentKeyTbl.ticketType)
        ]]>
    </sql>

    <sql id="orderStatement">
        <![CDATA[
        ORDER BY
        #ifnotnull($_parameter.searchCriteria.orderFields)
            #repeat(${_parameter.searchCriteria.orderFields} $orderField "" "" "")
                ${orderField.field} ${orderField.direction},
            #end
        #end
        m_prj_task.lastUpdatedTime DESC, m_prj_task.createdTime DESC
        ]]>
    </sql>

    <select id="getTotalCount" resultType="int" parameterType="com.mycollab.module.project.domain.criteria.TaskSearchCriteria" lang="velocity">
        SELECT count(*) as totalCount FROM m_prj_task
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="queryTotalCountSearchCriteria"/>
            #end
        #end
    </select>

    <select id="findPageableListByCriteria" resultMap="TaskResult" parameterType="com.mycollab.module.project.domain.criteria.TaskSearchCriteria" lang="velocity">
        <include refid="selectTask"/>
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="querySearchCriteria"/>
            #end
        #end
        <include refid="orderStatement"/>
    </select>

    <select id="findTaskById" parameterType="java.lang.Integer" resultMap="TaskResult" lang="velocity">
        <include refid="selectTask"/>
        WHERE m_prj_task.id=@{taskId, jdbcType=NUMERIC}
    </select>

    <select id="getNextItemKey" parameterType="map" resultType="java.lang.Integer" lang="velocity">
        SELECT MIN(id) FROM m_prj_task
        #trimext("WHERE" "AND|OR")
            <include refid="querySearchCriteria"/>
        #end
    </select>

    <select id="getPreviousItemKey" parameterType="map" resultType="java.lang.Integer" lang="velocity">
        SELECT MAX(id) FROM m_prj_task
        #trimext("WHERE" "AND|OR")
            <include refid="querySearchCriteria"/>
        #end
    </select>

    <select id="getPrioritySummary" parameterType="com.mycollab.module.project.domain.criteria.TaskSearchCriteria"
            resultMap="com.mycollab.common.dao.GroupItemMapper.BaseResultMap"
            lang="velocity">
        <![CDATA[
        SELECT m_prj_task.priority AS groupid, COUNT(m_prj_task.priority) AS value, '' as groupname
        FROM m_prj_task
        ]]>
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="querySearchCriteria"/>
            #end
        #end
        GROUP BY m_prj_task.priority
    </select>

    <select id="getStatusSummary" parameterType="com.mycollab.module.project.domain.criteria.TaskSearchCriteria"
            resultMap="com.mycollab.common.dao.GroupItemMapper.BaseResultMap"
            lang="velocity">
        <![CDATA[
        SELECT m_prj_task.status AS groupid, COUNT(m_prj_task.status) AS value, '' as groupname
        FROM m_prj_task
        ]]>
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="querySearchCriteria"/>
            #end
        #end
        GROUP BY m_prj_task.status
    </select>

    <select id="getAssignedDefectsSummary" parameterType="com.mycollab.module.project.domain.criteria.TaskSearchCriteria"
            resultMap="com.mycollab.common.dao.GroupItemMapper.BaseResultMap" lang="velocity">
        SELECT m_prj_task.assignUser AS groupid, COUNT(IFNULL(m_prj_task.assignUser, '')) AS value,
            s_user.avatarId AS extraValue, concat(s_user.firstname, ' ', s_user.lastname) as groupname
        FROM m_prj_task
            LEFT OUTER JOIN s_user ON (m_prj_task.assignUser = s_user.username)
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="querySearchCriteria"/>
            #end
        #end
        GROUP BY m_prj_task.assignUser
    </select>

</mapper>