<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mycollab.module.project.dao.BugMapperExt">
    <resultMap id="SimpleBugResult" extends="com.mycollab.module.project.dao.BugMapper.ResultMapWithBLOBs"
        type="com.mycollab.module.project.domain.SimpleBug">
        <result column="loguserFullName" jdbcType="VARCHAR" property="loguserFullName" />
        <result column="loguserAvatarId" jdbcType="VARCHAR" property="loguserAvatarId" />
        <result column="assignuserFullName" jdbcType="VARCHAR" property="assignuserFullName" />
        <result column="assignUserAvatarId" jdbcType="VARCHAR" property="assignUserAvatarId" />
        <result column="projectname" jdbcType="VARCHAR" property="projectname" />
        <result column="projectShortName" jdbcType="VARCHAR" property="projectShortName" />
        <result column="milestoneName" jdbcType="VARCHAR" property="milestoneName" />
        <result column="numComments" property="numComments" jdbcType="INTEGER" />
        <result column="billableHours" property="billableHours" jdbcType="DOUBLE" />
        <result column="nonBillableHours" property="nonBillableHours" jdbcType="DOUBLE" />
        <result column="numFollowers" property="numFollowers" jdbcType="INTEGER"/>
        <result column="ticketKey" property="ticketKey" jdbcType="INTEGER"/>
        <result column="parentTicketKey" property="parentTicketKey" jdbcType="INTEGER"/>
        <result column="parentTicketId" property="parentTicketId" jdbcType="INTEGER"/>
        <result column="parentTicketType" property="parentTicketType" jdbcType="VARCHAR"/>
        <collection columnPrefix="affectedversion_" notNullColumn="id"
            ofType="com.mycollab.module.project.domain.Version"
            property="affectedVersions"
            resultMap="com.mycollab.module.project.dao.VersionMapper.BaseResultMap" />
        <collection columnPrefix="fixedversion_" notNullColumn="id"
            ofType="com.mycollab.module.project.domain.Version"
            property="fixedVersions"
            resultMap="com.mycollab.module.project.dao.VersionMapper.BaseResultMap" />
        <collection columnPrefix="component_" notNullColumn="id"
            ofType="com.mycollab.module.project.domain.Component"
            property="components"
            resultMap="com.mycollab.module.project.dao.ComponentMapper.BaseResultMap" />
    </resultMap>

    <sql id="queryTotalCountSearchCriteria">
        <![CDATA[
        #set($searchCriteria = $_parameter.searchCriteria)
        
        #ifnotnull($searchCriteria.assignuser)
            ${searchCriteria.assignuser.operation} m_prj_bug.assignUser #equals($searchCriteria.assignuser.value)
        #end
        
        #ifnotnull($searchCriteria.name)
            ${searchCriteria.name.operation} m_prj_bug.name LIKE '%${searchCriteria.name.value}%'
        #end
        
        #ifnotnull($searchCriteria.detail)
            ${searchCriteria.detail.operation} m_prj_bug.detail LIKE '%${searchCriteria.detail.value}%'
        #end
        
        #ifnotnull($searchCriteria.description)
            ${searchCriteria.description.operation} m_prj_bug.description LIKE '%${searchCriteria.description.value}%'
        #end
        
        #ifnotnull($searchCriteria.updatedDate)
            ${searchCriteria.updatedDate.operation}
            CAST(m_prj_bug.lastUpdatedTime AS DATE )
            ${searchCriteria.updatedDate.comparison}
            @{searchCriteria.updatedDate.value}
        #end
        
        #ifnotnull($searchCriteria.dueDate)
            ${searchCriteria.dueDate.operation}
            CAST(m_prj_bug.duedate AS DATE )
            ${searchCriteria.dueDate.comparison}
            @{searchCriteria.dueDate.value}
        #end
        
        #ifnotnull($searchCriteria.resolvedDate)
            ${searchCriteria.resolvedDate.operation}
            CAST(m_prj_bug.resolveddate AS DATE )
            ${searchCriteria.resolvedDate.comparison}
            @{searchCriteria.resolvedDate.value}
        #end
        
        #ifnotnull($searchCriteria.updatedDateRange)
            ${searchCriteria.updatedDateRange.operation}
            CAST(m_prj_bug.lastUpdatedTime AS DATE ) BETWEEN @{searchCriteria.updatedDateRange.from} AND @{searchCriteria.updatedDateRange.to}
        #end
        
        #ifnotnull($searchCriteria.dueDateRange)
            ${searchCriteria.dueDateRange.operation}
            CAST(m_prj_bug.duedate AS DATE) BETWEEN @{searchCriteria.dueDateRange.from} AND @{searchCriteria.dueDateRange.to}
        #end
        
        #ifnotnull($searchCriteria.resolvedDateRange)
            ${searchCriteria.resolvedDateRange.operation}
            CAST(m_prj_bug.resolveddate AS DATE ) BETWEEN @{searchCriteria.resolvedDateRange.from} AND @{searchCriteria.resolvedDateRange.to}
        #end
        
        #ifnotnull($searchCriteria.environment)
            ${searchCriteria.environment.operation} m_prj_bug.environment LIKE '%${searchCriteria.environment.value}%'
        #end
        
        #ifnotnull($searchCriteria.loguser)
            ${searchCriteria.loguser.operation} m_prj_bug.createdUser = @{searchCriteria.loguser.value}
        #end
        
        #ifnotnull($searchCriteria.projectId)
            ${searchCriteria.projectId.operation} m_prj_bug.projectId=@{searchCriteria.projectId.value,jdbcType=NUMERIC}
        #end
        
        #ifnotnull($searchCriteria.priorities)
            ${searchCriteria.priorities.operation}
            m_prj_bug.priority IN
            #repeat(${searchCriteria.priorities.values} $priorityitem "," "(" ")")
                @{priorityitem}
            #end
        #end
        
        #ifnotnull($searchCriteria.statuses)
            ${searchCriteria.statuses.operation} m_prj_bug.status IN
            #repeat(${searchCriteria.statuses.values} $status "," "(" ")")
                @{status}
            #end
        #end
        
        #ifnotnull($searchCriteria.resolutions)
            ${searchCriteria.resolutions.operation}
            m_prj_bug.resolution IN
            #repeat(${searchCriteria.resolutions.values} $resolution "," "(" ")")
                @{resolution}
            #end
        #end
        
        #totalCountExpr($searchCriteria.extraFields)
        ]]>
    </sql>

    <sql id="querySearchCriteria">
        <![CDATA[
        #set($searchCriteria = $_parameter.searchCriteria)
        
        #ifnotnull($searchCriteria.assignuser)
            ${searchCriteria.assignuser.operation} m_prj_bug.assignUser #equals($searchCriteria.assignuser.value)
        #end
        
        #ifnotnull($searchCriteria.name)
            ${searchCriteria.name.operation} m_prj_bug.name LIKE '%${searchCriteria.name.value}%'
        #end
        
        #ifnotnull($searchCriteria.detail)
            ${searchCriteria.detail.operation} m_prj_bug.detail LIKE '%${searchCriteria.detail.value}%'
        #end
        
        #ifnotnull($searchCriteria.description)
            ${searchCriteria.description.operation} m_prj_bug.description LIKE '%${searchCriteria.description.value}%'
        #end
        
        #ifnotnull($searchCriteria.updatedDate)
            ${searchCriteria.updatedDate.operation}
            CAST(m_prj_bug.lastUpdatedTime AS DATE )
            ${searchCriteria.updatedDate.comparison}
            @{searchCriteria.updatedDate.value}
        #end
        
        #ifnotnull($searchCriteria.dueDate)
            ${searchCriteria.dueDate.operation}
            CAST(m_prj_bug.duedate AS DATE )
            ${searchCriteria.dueDate.comparison}
            @{searchCriteria.dueDate.value}
        #end
        
        #ifnotnull($searchCriteria.resolvedDate)
            ${searchCriteria.resolvedDate.operation}
            CAST(m_prj_bug.resolveddate AS DATE )
            ${searchCriteria.resolvedDate.comparison}
            @{searchCriteria.resolvedDate.value}
        #end
        
        #ifnotnull($searchCriteria.updatedDateRange)
            ${searchCriteria.updatedDateRange.operation}
            CAST(m_prj_bug.lastUpdatedTime AS DATE ) BETWEEN @{searchCriteria.updatedDateRange.from} AND @{searchCriteria.updatedDateRange.to}
        #end
        
        #ifnotnull($searchCriteria.dueDateRange)
            ${searchCriteria.dueDateRange.operation}
            CAST(m_prj_bug.duedate AS DATE) BETWEEN @{searchCriteria.dueDateRange.from} AND @{searchCriteria.dueDateRange.to}
        #end
        
        #ifnotnull($searchCriteria.resolvedDateRange)
            ${searchCriteria.resolvedDateRange.operation}
            CAST(m_prj_bug.resolveddate AS DATE ) BETWEEN @{searchCriteria.resolvedDateRange.from} AND @{searchCriteria.resolvedDateRange.to}
        #end
        
        #ifnotnull($searchCriteria.environment)
            ${searchCriteria.environment.operation} m_prj_bug.environment LIKE '%${searchCriteria.environment.value}%'
        #end
        
        #ifnotnull($searchCriteria.loguser)
            ${searchCriteria.loguser.operation} m_prj_bug.createdUser = @{searchCriteria.loguser.value}
        #end
        
        #ifnotnull($searchCriteria.projectId)
            ${searchCriteria.projectId.operation} m_prj_bug.projectId = @{searchCriteria.projectId.value}
        #end
        
        #ifnotnull($searchCriteria.priorities)
            ${searchCriteria.priorities.operation}
            m_prj_bug.priority IN
            #repeat(${searchCriteria.priorities.values} $priorityitem "," "(" ")")
                @{priorityitem}
            #end
        #end
        
        #ifnotnull($searchCriteria.statuses)
            ${searchCriteria.statuses.operation} m_prj_bug.status IN
            #repeat(${searchCriteria.statuses.values} $status "," "(" ")")
                @{status}
            #end
        #end
        
        #ifnotnull($searchCriteria.resolutions)
            ${searchCriteria.resolutions.operation}
            m_prj_bug.resolution IN
            #repeat(${searchCriteria.resolutions.values} $resolution "," "(" ")")
                @{resolution}
            #end
        #end
        
        #selectExpr($searchCriteria.extraFields)
        ]]>
    </sql>

    <sql id="selectBug">
        <![CDATA[
            SELECT DISTINCT m_prj_bug.id, m_prj_bug.name, m_prj_bug.detail, m_prj_bug.assignUser, m_prj_bug.createdTime,
                 m_prj_bug.createdUser, m_prj_bug.severity, m_prj_bug.priority, m_prj_bug.lastUpdatedTime,
                 m_prj_bug.status, m_prj_bug.duedate, m_prj_bug.environment, m_prj_bug.resolution,
                 m_prj_bug.projectId, m_prj_bug.resolveddate, m_prj_bug.sAccountId,
                 m_prj_bug.description, m_prj_bug.originalEstimate, m_prj_bug.startDate, m_prj_bug.endDate,
                 (SELECT count(*)
                    FROM m_comment
                    WHERE m_comment.type='Project-Bug' AND m_comment.typeId=m_prj_bug.id) AS numComments,
                 m_prj_bug.remainEstimate, m_prj_bug.milestoneId, m_prj_ticket_key.ticketKey AS ticketKey, milestone.name as milestoneName,
                 concat(assignuserTbl.firstname, ' ', assignuserTbl.lastname) as assignuserFullName,
                 assignuserTbl.avatarId AS assignUserAvatarId,
                 concat(loguserTbl.firstname, ' ', loguserTbl.lastname) as loguserFullName,
                 loguserTbl.avatarId AS loguserAvatarId,
                 m_prj_project.name as projectname, m_prj_project.shortname AS projectShortName,
                 affectedversion.id as affectedversion_id, affectedversion.projectId as affectedversion_projectid,
                 affectedversion.description as affectedversion_description, affectedversion.duedate as affectedversion_duedate, 
                 affectedversion.name as affectedversion_name, affectedversion.createdUser as affectedversion_createdUser,
                 affectedversion.createdTime as affectedversion_createdTime, affectedversion.lastUpdatedTime as affectedversion_lastUpdatedTime,
                 fixedversion.id as fixedversion_id, fixedversion.projectId as fixedversion_projectid,
                 fixedversion.description as fixedversion_description, fixedversion.duedate as fixedversion_duedate,
                 fixedversion.name as fixedversion_name, fixedversion.createdUser as fixedversion_createdUser,
                 fixedversion.createdTime as fixedversion_createdTime, fixedversion.lastUpdatedTime as fixedversion_lastUpdatedTime,
                 component.id as component_id, component.projectId as component_projectid, component.name as component_name,
                 component.userlead as component_userlead, component.description as component_description, component.createdUser as component_createdUser,
                 component.createdTime as component_createdTime, component.lastUpdatedTime as component_lastUpdatedTime,
                 (SELECT COALESCE(SUM(m_prj_time_logging.logValue), 0) FROM m_prj_time_logging WHERE m_prj_time_logging.projectId = m_prj_bug.projectId
                     AND m_prj_time_logging.type='Project-Bug' AND m_prj_time_logging.typeId=m_prj_bug.id AND m_prj_time_logging.isBillable = 1) AS billableHours,
                 (SELECT COALESCE(SUM(m_prj_time_logging.logValue), 0) FROM m_prj_time_logging WHERE m_prj_time_logging.projectId = m_prj_bug.projectId
                     AND m_prj_time_logging.type='Project-Bug' AND m_prj_time_logging.typeId=m_prj_bug.id AND m_prj_time_logging.isBillable = 0) AS nonBillableHours,
                 (SELECT COUNT(*) FROM m_monitor_item WHERE m_monitor_item.typeId = m_prj_bug.id AND m_monitor_item.type = 'Project-Bug') AS numFollowers,
                 parentKeyTbl.ticketKey AS parentTicketKey, parentKeyTbl.ticketId AS parentTicketId, m_prj_ticket_hierarchy.parentType AS parentTicketType
            FROM m_prj_bug
                LEFT OUTER JOIN m_prj_project ON (m_prj_bug.projectId = m_prj_project.id)
                LEFT OUTER JOIN s_user AS assignuserTbl ON (m_prj_bug.assignUser=assignuserTbl.username)
                LEFT OUTER JOIN s_user AS loguserTbl ON (m_prj_bug.createdUser=loguserTbl.username)
                LEFT OUTER JOIN m_prj_ticket_relation AS relatedItem1 ON (relatedItem1.ticketId = m_prj_bug.id AND relatedItem1.ticketType='Project-Bug' AND relatedItem1.rel='AffVersion')
                LEFT OUTER JOIN m_prj_version AS affectedversion ON (affectedversion.id = relatedItem1.typeId AND relatedItem1.type = 'Project-Version')
                LEFT OUTER JOIN m_prj_ticket_relation AS relatedItem2 ON (relatedItem2.ticketId = m_prj_bug.id AND relatedItem2.ticketType='Project-Bug' AND relatedItem2.rel='FixVersion')
                LEFT OUTER JOIN m_prj_version AS fixedversion ON (fixedversion.id = relatedItem2.typeId AND relatedItem2.type = 'Project-Version')
                LEFT OUTER JOIN m_prj_ticket_relation AS relatedItem3 ON (relatedItem3.ticketId = m_prj_bug.id AND relatedItem3.ticketType='Project-Bug' AND relatedItem3.rel='Component')
                LEFT OUTER JOIN m_prj_component AS component ON (component.id = relatedItem3.typeId AND relatedItem3.type = 'Project-Component')
                LEFT OUTER JOIN m_prj_milestone AS milestone ON (m_prj_bug.milestoneId = milestone.id)
                LEFT OUTER JOIN m_prj_ticket_key ON (m_prj_ticket_key.ticketId = m_prj_bug.id AND m_prj_ticket_key.ticketType = 'Project-Bug')
                LEFT OUTER JOIN m_prj_ticket_hierarchy ON (m_prj_ticket_hierarchy.ticketId = m_prj_bug.id AND m_prj_ticket_hierarchy.ticketType = 'Project-Bug')
                LEFT OUTER JOIN m_prj_ticket_key AS parentKeyTbl ON (m_prj_ticket_hierarchy.parentId = parentKeyTbl.ticketId AND m_prj_ticket_hierarchy.parentType = parentKeyTbl.ticketType)
        ]]>
    </sql>

    <select id="getBugById" resultMap="SimpleBugResult" resultType="int" lang="velocity">
        <include refid="selectBug" />
        WHERE m_prj_bug.id = @{bugid,jdbcType=NUMERIC}
    </select>

    <select id="getTotalCount" parameterType="com.mycollab.module.project.domain.criteria.BugSearchCriteria" resultType="int" lang="velocity">
        SELECT count(*) as totalCount FROM m_prj_bug
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="queryTotalCountSearchCriteria" />
            #end
        #end
    </select>

    <select id="findPageableListByCriteria" parameterType="com.mycollab.module.project.domain.criteria.BugSearchCriteria" resultMap="SimpleBugResult" lang="velocity">
        <include refid="selectBug" />
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="querySearchCriteria" />
            #end
        #end    
        <include refid="orderStatement" />
    </select>

    <sql id="orderStatement">
        ORDER BY
        #ifnotnull($_parameter.searchCriteria.orderFields)
            #repeat(${_parameter.searchCriteria.orderFields} $orderField "" "" "")
                ${orderField.field} ${orderField.direction},
            #end
        #end
        m_prj_bug.lastUpdatedTime DESC
    </sql>

    <select id="getNextItemKey" parameterType="map" resultType="java.lang.Integer" lang="velocity">
        SELECT MIN(id) FROM m_prj_bug
        #trimext("WHERE" "AND|OR")
            <include refid="querySearchCriteria"/>
        #end
    </select>

    <select id="getPreviousItemKey" parameterType="map" resultType="java.lang.Integer" lang="velocity">
        SELECT MAX(id) FROM m_prj_bug
        #trimext("WHERE" "AND|OR")
            <include refid="querySearchCriteria"/>
        #end
    </select>

    <select id="getStatusSummary" parameterType="com.mycollab.module.project.domain.criteria.BugSearchCriteria"
        resultMap="com.mycollab.common.dao.GroupItemMapper.BaseResultMap" lang="velocity">
        <![CDATA[
        SELECT m_prj_bug.status AS groupid, COUNT(m_prj_bug.status) AS value, '' as groupname
        FROM m_prj_bug
        ]]>
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="querySearchCriteria" />
            #end
        #end
        GROUP BY m_prj_bug.status
    </select>

    <select id="getPrioritySummary" parameterType="com.mycollab.module.project.domain.criteria.BugSearchCriteria"
        resultMap="com.mycollab.common.dao.GroupItemMapper.BaseResultMap" lang="velocity">
        <![CDATA[
        SELECT m_prj_bug.priority AS groupid,
            COUNT(m_prj_bug.priority) AS value, '' as groupname
        FROM m_prj_bug
        ]]>
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="querySearchCriteria" />
            #end
        #end
        GROUP BY m_prj_bug.priority
    </select>

    <select id="getResolutionDefectsSummary" parameterType="com.mycollab.module.project.domain.criteria.BugSearchCriteria"
        resultMap="com.mycollab.common.dao.GroupItemMapper.BaseResultMap" lang="velocity">
        <![CDATA[
        SELECT m_prj_bug.resolution AS groupid,
            COUNT(m_prj_bug.resolution) AS value, '' as groupname
        FROM
            m_prj_bug
        ]]>
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="querySearchCriteria" />
            #end
        #end
        GROUP BY m_prj_bug.resolution
    </select>

    <select id="getAssignedDefectsSummary" parameterType="com.mycollab.module.project.domain.criteria.BugSearchCriteria"
        resultMap="com.mycollab.common.dao.GroupItemMapper.BaseResultMap" lang="velocity">
        <![CDATA[
        SELECT m_prj_bug.assignUser AS groupid,
            COUNT(IFNULL(m_prj_bug.assignUser, '')) AS value,
            s_user.avatarId AS extraValue,
            concat(s_user.firstname, ' ', s_user.lastname) as groupname
        FROM m_prj_bug
            LEFT OUTER JOIN s_user ON (m_prj_bug.assignUser = s_user.username)
        ]]>
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="querySearchCriteria" />
            #end
        #end
        GROUP BY m_prj_bug.assignUser
    </select>

    <select id="getReporterDefectsSummary" parameterType="com.mycollab.module.project.domain.criteria.BugSearchCriteria"
        resultMap="com.mycollab.common.dao.GroupItemMapper.BaseResultMap" lang="velocity">
        <![CDATA[
        SELECT m_prj_bug.createdUser AS groupid,
            COUNT(IFNULL(m_prj_bug.createdUser,'')) AS value,
            concat(s_user.firstname, ' ', s_user.lastname) as groupname
        FROM m_prj_bug
            LEFT OUTER JOIN s_user ON (m_prj_bug.createdUser = s_user.username)
        ]]>
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="querySearchCriteria" />
            #end
        #end
        GROUP BY m_prj_bug.createdUser
    </select>

    <select id="getComponentDefectsSummary" parameterType="com.mycollab.module.project.domain.criteria.BugSearchCriteria"
        resultMap="com.mycollab.common.dao.GroupItemMapper.BaseResultMap" lang="velocity">
        <![CDATA[
        SELECT m_prj_component.id AS groupid,
            COUNT(IFNULL(m_prj_component.id,'')) AS value,
            m_prj_component.name as groupname
        FROM m_prj_bug
        RIGHT OUTER JOIN m_prj_ticket_relation ON (m_prj_bug.id = m_prj_ticket_relation.ticketId AND m_prj_ticket_relation.ticketType='Project-Bug')
        RIGHT OUTER JOIN m_prj_component ON (m_prj_ticket_relation.type = 'Component'
                AND m_prj_component.id = m_prj_ticket_relation.typeId)
        ]]>

        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="querySearchCriteria" />
            #end
        #end
        GROUP BY m_prj_component.id

        UNION

        <![CDATA[
        SELECT 0 as groupid, COUNT(m_prj_bug.id) as value, '' as groupname
            FROM m_prj_bug
            WHERE (SELECT COUNT(*) FROM m_prj_ticket_relation WHERE m_prj_ticket_relation.type='Component'
                AND m_prj_bug.id=m_prj_ticket_relation.typeId AND m_prj_ticket_relation.ticketType='Project-Bug') = 0
        ]]>
        #ifnotnull($_parameter.searchCriteria)
            <include refid="querySearchCriteria" />
        #end
    </select>

    <select id="getVersionDefectsSummary" parameterType="com.mycollab.module.project.domain.criteria.BugSearchCriteria"
        resultMap="com.mycollab.common.dao.GroupItemMapper.BaseResultMap" lang="velocity">
        <![CDATA[
        SELECT m_prj_version.id AS groupid,
            COUNT(IFNULL(m_prj_version.id,'')) AS value,
            m_prj_version.name as groupname
        FROM m_prj_bug
        RIGHT OUTER JOIN m_tracker_related_item ON (CONCAT('bug-', m_prj_bug.id) = m_tracker_related_item.refkey)
        RIGHT OUTER JOIN m_prj_version ON ((m_tracker_related_item.type = 0 || m_tracker_related_item.type =1)
                AND m_prj_version.id = m_tracker_related_item.typeId)
        ]]>
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="querySearchCriteria" />
            #end
        #end
        GROUP BY m_prj_version.id

        UNION

        <![CDATA[       
        SELECT 0 as groupid, COUNT(m_prj_bug.id) as value, '' as groupname
            FROM m_prj_bug
            WHERE (SELECT COUNT(*) FROM m_tracker_related_item WHERE (m_tracker_related_item.type=0 OR m_tracker_related_item.type=1) AND CONCAT('bug-', m_prj_bug.id) = m_tracker_related_item.refkey) = 0
        ]]>
        #ifnotnull($_parameter.searchCriteria)
            <include refid="querySearchCriteria" />
        #end
    </select>

</mapper>